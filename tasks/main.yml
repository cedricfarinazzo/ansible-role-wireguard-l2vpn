---
# Include tasks based on the operating system family
- name: Include OS-specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_os_family }}.yml"
    - "{{ ansible_distribution }}.yml"
    - default.yml
  tags:
    - always

# Install required packages
- name: Install required packages
  ansible.builtin.package:
    name: "{{ wireguard_package }}"
    state: "{{ wireguard_package_state }}"
  become: true
  notify: Restart wireguard
  ignore_errors: "{{ ansible_check_mode }}"

- name: Install network tools
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items:
    - iproute2
  become: true
  ignore_errors: "{{ ansible_check_mode }}"

# Enable IP forwarding for L2VPN functionality
- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes
  become: true

- name: Enable IPv6 forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: '1'
    state: present
    reload: yes
  become: true

# Ensure Wireguard directory exists
- name: Create Wireguard directory
  ansible.builtin.file:
    path: /etc/wireguard
    state: directory
    mode: '0700'
  become: true

# Generate wireguard keys (with optional rotation)
- name: Check private key age for rotation
  ansible.builtin.stat:
    path: /etc/wireguard/privatekey
  register: private_key_stat
  become: true

- name: Calculate key age in days
  ansible.builtin.set_fact:
    key_age_days: "{{ ((ansible_date_time.epoch | int) - (private_key_stat.stat.mtime | default(0))) // 86400 }}"
  when: private_key_stat.stat.exists

- name: Determine if key rotation is needed
  ansible.builtin.set_fact:
    rotation_needed: >-
      {{
        wireguard_key_rotation_enabled | bool and
        private_key_stat.stat.exists and
        key_age_days | int >= wireguard_key_rotation_days | int
      }}

- name: Log key rotation status
  ansible.builtin.debug:
    msg: >-
      Key rotation for {{ inventory_hostname }}: 
      {% if private_key_stat.stat.exists %}
      Age={{ key_age_days }} days, 
      Threshold={{ wireguard_key_rotation_days }} days, 
      Needed={{ rotation_needed }}
      {% else %}
      No existing key, will generate new one
      {% endif %}

- name: Create wireguard backups directory
  ansible.builtin.file:
    path: /etc/wireguard/backups
    state: directory
    mode: '0600'
  become: true
  when: wireguard_key_rotation_enabled | bool

- name: Backup old private key before rotation
  ansible.builtin.copy:
    src: "/etc/wireguard/privatekey"
    dest: "/etc/wireguard/backups/privatekey_{{ ansible_date_time.iso8601_basic_short }}"
    remote_src: true
    backup: false
    mode: "0600"
  become: true
  when:
    - rotation_needed | bool
    - private_key_stat.stat.exists
  ignore_errors: true

- name: Generate Wireguard private key (initial or rotated)
  ansible.builtin.shell: wg genkey > /etc/wireguard/privatekey && chmod 600 /etc/wireguard/privatekey
  become: true
  when: not private_key_stat.stat.exists or rotation_needed | bool
  register: key_generated

- name: Log key generation
  ansible.builtin.debug:
    msg: >-
      {% if not private_key_stat.stat.exists %}
      Generated new private key for {{ inventory_hostname }}
      {% elif rotation_needed | bool %}
      Rotated private key for {{ inventory_hostname }} ({{ key_age_days }} days old)
      {% endif %}
  when: key_generated is changed

- name: Read Wireguard private key
  ansible.builtin.slurp:
    src: /etc/wireguard/privatekey
  register: wireguard_private_key_encoded
  become: true

- name: Set Wireguard private key fact
  ansible.builtin.set_fact:
    wireguard_private_key: "{{ wireguard_private_key_encoded['content'] | b64decode | trim }}"
  when: wireguard_private_key_encoded is defined

- name: Generate Wireguard public key from private key
  ansible.builtin.shell: |
    echo "{{ wireguard_private_key }}" | wg pubkey
  register: wireguard_public_key_result
  changed_when: false

- name: Set Wireguard public key fact
  ansible.builtin.set_fact:
    wireguard_public_key: "{{ wireguard_public_key_result.stdout }}"

# Exchange public keys (this is typically done via a host/group var file in a real-world scenario)
- name: Gather facts from all hosts for key exchange
  ansible.builtin.setup:
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['all'] }}"
  run_once: true
  when: groups['all'] | length > 1
  ignore_errors: "{{ ansible_check_mode }}"

# Configure Wireguard full mesh
- name: Generate wireguard configuration file
  ansible.builtin.template:
    src: wg0.conf.j2
    dest: /etc/wireguard/{{ wireguard_interface }}.conf
    mode: '0600'
  become: true
  notify: Restart wireguard

# Enable and start wireguard service
- name: Enable and start Wireguard
  ansible.builtin.service:
    name: wg-quick@{{ wireguard_interface }}
    state: "{{ wireguard_service_state }}"
    enabled: "{{ wireguard_service_enabled }}"
  become: true
  register: wireguard_service
  ignore_errors: "{{ ansible_check_mode }}"
